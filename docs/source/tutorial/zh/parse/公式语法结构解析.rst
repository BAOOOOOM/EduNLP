公式语法结构解析
--------------------

本功能主要由EduNLP.Formula模块实现，具有检查传入的公式是否合法，并将合法的公式转换为art树的形式。从实际使用的角度，本模块常作为中间处理过程，调用相应的模型即可自动选择本模块的相关参数，故一般不需要特别关注。

主要内容介绍
+++++++++++++++

1.Formula:对传入的单个公式进行判断，判断传入的公式是否为str形式，如果是则使用ast的方法进行处理，否则进行报错。此外，提供了variable_standardization参数，当此参数为True时，使用变量标准化方法，即同一变量拥有相同的变量编号。

2.FormulaGroup:如果需要传入公式集则可调用此接口，最终将形成ast森林，森林中树的结构同Formula。


Examples：

::

 >>> text = '支持公式如$\\frac{y}{x}$，$\\SIFBlank$，$\\FigureID{1}$，不支持公式如$\\frac{ \\dddot y}{x}$'
 >>> text_parser = Parser(text)
 >>> text_parser.description_list()
 >>> text_parser.fomula_illegal_flag
 >>> 1

::

 >>> f = Formula("x")
 >>> f
 <Formula: x>
 >>> f.ast
 [{'val': {'id': 0, 'type': 'mathord', 'text': 'x', 'role': None}, 'structure': {'bro': [None, None], 'child': None, 'father': None, 'forest': None}}]
 >>> f.elements
 [{'id': 0, 'type': 'mathord', 'text': 'x', 'role': None}]
 >>> f.variable_standardization(inplace=True)
 <Formula: x>
 >>> f.elements
 [{'id': 0, 'type': 'mathord', 'text': 'x', 'role': None, 'var': 0}]

::

 >>> fg = FormulaGroup(["x + y", "y + x", "z + x"])
 >>> fg
 <FormulaGroup: <Formula: x + y>;<Formula: y + x>;<Formula: z + x>>
 >>> fg = FormulaGroup(["x + y", Formula("y + x"), "z + x"])
 >>> fg
 <FormulaGroup: <Formula: x + y>;<Formula: y + x>;<Formula: z + x>>
 >>> fg = FormulaGroup(["x", Formula("y"), "x"])
 >>> fg.elements
 [{'id': 0, 'type': 'mathord', 'text': 'x', 'role': None}, {'id': 1, 'type': 'mathord', 'text': 'y', 'role': None},\
 {'id': 2, 'type': 'mathord', 'text': 'x', 'role': None}]
 >>> fg = FormulaGroup(["x", Formula("y"), "x"], variable_standardization=True)
 >>> fg.elements
 [{'id': 0, 'type': 'mathord', 'text': 'x', 'role': None, 'var': 0}, {'id': 1, 'type': 'mathord', 'text': 'y', 'role': None, 'var': 1}, {'id': 2, 'type': 'mathord', 'text': 'x', 'role': None, 'var': 0}]

详细示范
+++++++++++++++

.. toctree::
   :titlesonly:

   树型处理效果 <../../build/blitz/formula/tree.ipynb>
   公式解析效果案例 <../../build/blitz/formula/formula.ipynb>
